# Redis Enterprise Test Environment with Full Validation
# 
# Usage:
#   docker compose up -d        # Start and run full test cascade
#   docker compose logs -f      # Watch all service logs
#   docker compose down -v      # Clean up everything
#
# For Mac users: Set REDIS_ENTERPRISE_IMAGE=kurtfm/rs-arm:latest

services:
  # Redis Enterprise server
  enterprise:
    image: ${REDIS_ENTERPRISE_IMAGE:-redislabs/redis:latest}
    container_name: redis-enterprise
    cap_add:
      - SYS_RESOURCE
    ports:
      - "9443:9443"   # REST API
      - "8443:8443"   # Web UI  
      - "12000:12000" # Database port
    environment:
      ACCEPT_EULA: "yes"
    volumes:
      - enterprise-data:/var/opt/redislabs
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:9443/v1/bootstrap"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s
    networks:
      - redis-net

  # Initialize cluster
  init-cluster:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: init-cluster
    restart: "no"
    depends_on:
      enterprise:
        condition: service_healthy
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      RUST_LOG: ${RUST_LOG:-info}
    networks:
      - redis-net
    entrypoint: ["/bin/sh", "-c"]
    command: |
      sh -c '
      echo "========================================" &&
      echo "Step 1: Initializing Redis Enterprise cluster..." &&
      echo "========================================" &&
      
      redisctl enterprise workflow init-cluster \
        --insecure \
        --name "test-cluster" \
        --username "admin@redis.local" \
        --password "Redis123!" \
        --accept-eula &&
      
      echo "✓ Cluster initialized successfully" &&
      echo ""
      '

  # Create database
  create-db:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: create-db
    restart: "no"
    depends_on:
      init-cluster:
        condition: service_completed_successfully
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      REDIS_ENTERPRISE_USER: "admin@redis.local"
      REDIS_ENTERPRISE_PASSWORD: "Redis123!"
      RUST_LOG: ${RUST_LOG:-info}
    networks:
      - redis-net
    entrypoint: ["/bin/sh", "-c"]
    command: |
      sh -c '
      echo "========================================" &&
      echo "Step 2: Creating test database..." &&
      echo "========================================" &&
      
      redisctl enterprise workflow create-database \
        --insecure \
        --name "test-db" \
        --memory 100MB \
        --port 12000 &&
      
      echo "✓ Database created successfully" &&
      echo ""
      '

  # Validate API
  validate-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: validate-api
    restart: "no"
    depends_on:
      create-db:
        condition: service_completed_successfully
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      REDIS_ENTERPRISE_USER: "admin@redis.local"
      REDIS_ENTERPRISE_PASSWORD: "Redis123!"
      RUST_LOG: ${RUST_LOG:-info}
    networks:
      - redis-net
    entrypoint: ["/bin/sh", "-c"]
    command: |
      sh -c '
      echo "========================================" &&
      echo "Step 3: Validating API endpoints..." &&
      echo "========================================" &&
      
      echo "→ Listing databases..." &&
      redisctl enterprise database list --insecure --output table &&
      
      echo "" &&
      echo "→ Getting database info..." &&
      redisctl enterprise database get 1 --insecure --output json | head -20 &&
      
      echo "" &&
      echo "→ Checking cluster info..." &&
      redisctl enterprise cluster info --insecure --query "name" &&
      
      echo "✓ API validation successful" &&
      echo ""
      '

  # Test Redis connection
  test-redis:
    image: redis:7-alpine
    container_name: test-redis
    restart: "no"
    depends_on:
      validate-api:
        condition: service_completed_successfully
    networks:
      - redis-net
    command: |
      sh -c '
      echo "========================================" &&
      echo "Step 4: Testing Redis connection..." &&
      echo "========================================" &&
      
      # Wait for database to be fully ready
      sleep 5 &&
      
      echo "→ Setting test key..." &&
      redis-cli -h enterprise -p 12000 SET test:key "Hello from Docker!" &&
      
      echo "→ Getting test key..." &&
      redis-cli -h enterprise -p 12000 GET test:key &&
      
      echo "→ Running PING..." &&
      redis-cli -h enterprise -p 12000 PING &&
      
      echo "→ Getting INFO..." &&
      redis-cli -h enterprise -p 12000 INFO server | head -10 &&
      
      echo "" &&
      echo "========================================" &&
      echo "✅ All tests passed successfully!" &&
      echo "" &&
      echo "Web UI: https://localhost:8443" &&
      echo "Username: admin@redis.local" &&
      echo "Password: Redis123!" &&
      echo "" &&
      echo "API: https://localhost:9443" &&
      echo "Database: redis://localhost:12000" &&
      echo "========================================" 
      '

networks:
  redis-net:
    driver: bridge

volumes:
  enterprise-data: