# Redis Enterprise Test Environment
# Usage: docker compose up -d

services:
  # Redis Enterprise single node for testing
  enterprise:
    image: ${REDIS_ENTERPRISE_IMAGE:-redislabs/redis:latest}
    container_name: redis-enterprise
    cap_add:
      - SYS_RESOURCE
    ports:
      - "9443:9443"   # REST API
      - "8443:8443"   # Web UI  
      - "12000-12010:12000-12010" # Database ports
    environment:
      ACCEPT_EULA: "yes"
    volumes:
      - enterprise-data:/var/opt/redislabs
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:9443/v1/bootstrap"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s

  # Initialize Enterprise cluster using our CLI
  init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: redis-enterprise-init
    restart: "no"
    depends_on:
      enterprise:
        condition: service_healthy
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      REDIS_ENTERPRISE_USER: "admin@redis.local"
      REDIS_ENTERPRISE_PASSWORD: "Redis123!"
      RUST_LOG: ${RUST_LOG:-info}
    command: |
      sh -c '
      echo "Waiting for cluster to be ready..." &&
      sleep 10 &&
      echo "Initializing cluster..." &&
      ./target/release/redisctl bootstrap create \
        --insecure \
        --name "test-cluster" \
        --username "admin@redis.local" \
        --password "Redis123!" \
        --accept-eula &&
      echo "Creating test database..." &&
      ./target/release/redisctl database create \
        --insecure \
        --name "test-db" \
        --memory 100MB \
        --port 12000 &&
      echo "Cluster initialization complete!"
      '

  # CLI container for interactive testing
  cli:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: redis-cli
    stdin_open: true
    tty: true
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      REDIS_ENTERPRISE_USER: "admin@redis.local"
      REDIS_ENTERPRISE_PASSWORD: "Redis123!"
      RUST_LOG: ${RUST_LOG:-info}
    volumes:
      - ./:/workspace:ro
    working_dir: /workspace
    command: ["/bin/sh"]
    profiles: ["cli"]

volumes:
  enterprise-data: