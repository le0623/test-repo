# git-cliff configuration for changelog generation
# https://git-cliff.org/docs/configuration

[changelog]
# Changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# Template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}](https://github.com/joshrotenberg/redisctl/commit/{{ commit.id }}))\
        {% if commit.github.pr_number %} ([#{{ commit.github.pr_number }}](https://github.com/joshrotenberg/redisctl/pull/{{ commit.github.pr_number }})){% endif %}\
    {% endfor %}
{% endfor %}\n
"""
# Remove the leading and trailing whitespace from the template
trim = true
# Changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# Postprocessors
postprocessors = [
    # { pattern = '<REPO>', replace = "https://github.com/joshrotenberg/redisctl" }, # replace repository URL
]

[git]
# Parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# Filter out the commits that are not conventional
filter_unconventional = true
# Process each line of a commit as an individual commit
split_commits = false
# Regex for preprocessing the commit messages
commit_preprocessors = [
    # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/joshrotenberg/redisctl/issues/${2}))" },
    # Replace issue numbers
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/joshrotenberg/redisctl/issues/${2}))" },
    # Check spelling of the commit with https://github.com/crate-ci/typos
    # If the spelling is incorrect, it will be automatically fixed.
    # { pattern = '.*', replace_command = 'typos --write-changes -' },
]
# Regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "⚡ Features" },
    { message = "^fix", group = "🐛 Bug Fixes" },
    { message = "^doc", group = "📚 Documentation" },
    { message = "^perf", group = "⚡ Performance" },
    { message = "^refactor", group = "🚜 Refactor" },
    { message = "^style", group = "🎨 Styling" },
    { message = "^test", group = "🧪 Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore|ci", group = "⚙️ Miscellaneous Tasks" },
    { body = ".*security", group = "🔐 Security" },
    { message = "^revert", group = "◀️ Revert" },
]
# Protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# Filter out the commits that are not matched by commit parsers
filter_commits = false
# Sort the tags topologically
topo_order = false
# Sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# Limit the number of commits included in the changelog.
# limit_commits = 42
