# Development and Testing Extensions for Docker Compose
# Usage: docker compose -f docker-compose.yml -f docker-compose.dev.yml up
#
# This file extends the main docker-compose.yml with development-specific services
#
# Additional Profiles:
#   - test: Run comprehensive CLI tests
#   - all-dbs: Create all database types
#   - perf: Performance testing
#   - debug: Debug container with verbose logging
#   - cleanup: Remove test databases
#   - integration: Full integration test suite

services:
  # Run all tests against the cluster
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
    image: redis-enterprise-cli:latest
    container_name: redis-enterprise-test-runner
    networks:
      - redis-net
    depends_on:
      enterprise-db-create:
        condition: service_completed_successfully
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      REDIS_ENTERPRISE_USER: "admin@redis.local"
      REDIS_ENTERPRISE_PASSWORD: "Redis123!"
      RUST_LOG: ${RUST_LOG:-debug}  # More verbose for testing
    profiles: ["test"]
    command: |
      sh -c '
      echo "=== Testing ALL Feature-Complete Endpoints ===\n" &&
      
      echo "1. Cluster Commands:" &&
      redis-enterprise cluster info --insecure --output json > /dev/null &&
      redis-enterprise cluster stats --insecure --output json > /dev/null &&
      redis-enterprise cluster update --name "test-update" --insecure > /dev/null &&
      echo "✓ Cluster commands working" &&
      
      echo "\n2. Database Commands:" &&
      redis-enterprise database list --insecure --output json > /dev/null &&
      redis-enterprise database get test-db --insecure --output json > /dev/null &&
      redis-enterprise database stats test-db --insecure > /dev/null &&
      redis-enterprise database wait test-db --status active --timeout 5 --insecure > /dev/null &&
      echo "✓ Database commands working" &&
      
      echo "\n3. Node Commands:" &&
      redis-enterprise node list --insecure --output table > /dev/null &&
      redis-enterprise node get 1 --insecure > /dev/null &&
      redis-enterprise node stats 1 --insecure > /dev/null &&
      echo "✓ Node commands working" &&
      
      echo "\n4. User Commands:" &&
      redis-enterprise user list --insecure --output table > /dev/null &&
      redis-enterprise user get 1 --insecure > /dev/null &&
      redis-enterprise user create --email test-cli@redis.com --password Test123! --insecure > /dev/null &&
      echo "✓ User commands working" &&
      
      echo "\n5. Bootstrap Commands:" &&
      redis-enterprise bootstrap status --insecure > /dev/null &&
      echo "✓ Bootstrap commands working" &&
      
      echo "\n6. Module Commands:" &&
      redis-enterprise module list --insecure > /dev/null &&
      echo "✓ Module commands working" &&
      
      echo "\n7. Role Commands:" &&
      redis-enterprise role list --insecure > /dev/null &&
      echo "✓ Role commands working" &&
      
      echo "\n8. License Commands:" &&
      redis-enterprise license get --insecure > /dev/null &&
      redis-enterprise license usage --insecure > /dev/null &&
      redis-enterprise license cluster --insecure > /dev/null &&
      echo "✓ License commands working" &&
      
      echo "\n9. Configuration Commands:" &&
      redis-enterprise config set --profile docker-test --url https://enterprise:9443 &&
      redis-enterprise config list > /dev/null &&
      redis-enterprise config get --profile docker-test > /dev/null &&
      redis-enterprise config remove --profile docker-test &&
      echo "✓ Configuration commands working" &&
      
      echo "\n10. API Commands:" &&
      redis-enterprise api get /v1/cluster --insecure --output json > /dev/null &&
      redis-enterprise api get /v1/bdbs --insecure > /dev/null &&
      redis-enterprise api get /v1/nodes --insecure > /dev/null &&
      echo "✓ API commands working" &&
      
      echo "\n11. JMESPath Queries:" &&
      redis-enterprise database list --insecure --query "[].name" > /dev/null &&
      redis-enterprise node list --insecure --query "[].{id:uid,role:role}" > /dev/null &&
      echo "✓ JMESPath queries working" &&
      
      echo "\n12. Output Formats:" &&
      redis-enterprise cluster info --insecure --output json > /dev/null &&
      redis-enterprise cluster info --insecure --output yaml > /dev/null &&
      redis-enterprise database list --insecure --output table > /dev/null &&
      echo "✓ All output formats working" &&
      
      echo "\n=== ALL TESTS PASSED - CLI IS FEATURE COMPLETE! ===\n"
      '

  # Create all supported database types
  create-all-db-types:
    build:
      context: .
      dockerfile: Dockerfile
    image: redis-enterprise-cli:latest
    container_name: redis-enterprise-create-all-dbs
    networks:
      - redis-net
    depends_on:
      enterprise-db-create:
        condition: service_completed_successfully
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      REDIS_ENTERPRISE_USER: "admin@redis.local"
      REDIS_ENTERPRISE_PASSWORD: "Redis123!"
      RUST_LOG: ${RUST_LOG:-info}
    profiles: ["all-dbs"]
    command: |
      sh -c '
      for db_type in cache persistent search timeseries json graph; do
        echo "Creating $db_type database..." &&
        redis-enterprise workflow create-database \
          --insecure \
          --name "${db_type}-example" \
          --db-type "$db_type" || echo "Failed to create $db_type database"
      done &&
      echo "All database types created. Listing databases:" &&
      redis-enterprise database list --insecure --output table
      '

  # Performance testing
  perf-test:
    build:
      context: .
      dockerfile: Dockerfile
    image: redis-enterprise-cli:latest
    container_name: redis-enterprise-perf-test
    networks:
      - redis-net
    depends_on:
      enterprise-db-create:
        condition: service_completed_successfully
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      REDIS_ENTERPRISE_USER: "admin@redis.local"
      REDIS_ENTERPRISE_PASSWORD: "Redis123!"
      RUST_LOG: ${RUST_LOG:-warn}  # Less verbose for performance testing
    profiles: ["perf"]
    command: |
      sh -c '
      echo "Starting performance test..." &&
      start_time=$(date +%s) &&
      
      echo "Testing list operations..." &&
      for i in $(seq 1 100); do
        redis-enterprise database list --insecure --output json > /dev/null
      done &&
      
      echo "Testing get operations..." &&
      for i in $(seq 1 100); do
        redis-enterprise database get test-db --insecure --output json > /dev/null
      done &&
      
      end_time=$(date +%s) &&
      duration=$((end_time - start_time)) &&
      echo "Performance test completed in $duration seconds"
      '

  # Debug container with verbose logging
  debug:
    build:
      context: .
      dockerfile: Dockerfile
    image: redis-enterprise-cli:latest
    container_name: redis-enterprise-debug
    stdin_open: true
    tty: true
    networks:
      - redis-net
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      REDIS_ENTERPRISE_USER: "admin@redis.local"
      REDIS_ENTERPRISE_PASSWORD: "Redis123!"
      RUST_LOG: "debug,redis_enterprise=trace,redis_enterprise_cli=trace"
      RUST_BACKTRACE: "1"
    volumes:
      - ./:/workspace:ro
      - ./target:/target:rw  # For cargo builds if needed
    working_dir: /workspace
    command: ["sh"]
    profiles: ["debug"]

  # Cleanup service - removes all test databases
  cleanup:
    build:
      context: .
      dockerfile: Dockerfile
    image: redis-enterprise-cli:latest
    container_name: redis-enterprise-cleanup
    networks:
      - redis-net
    depends_on:
      enterprise-db-create:
        condition: service_completed_successfully
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      REDIS_ENTERPRISE_USER: "admin@redis.local"
      REDIS_ENTERPRISE_PASSWORD: "Redis123!"
      RUST_LOG: ${RUST_LOG:-info}
    profiles: ["cleanup"]
    command: |
      sh -c '
      echo "Cleaning up test databases..." &&
      databases=$(redis-enterprise database list --insecure --output json | jq -r ".[].name") &&
      for db in $databases; do
        if [ "$db" != "test-db" ]; then
          echo "Deleting database: $db" &&
          redis-enterprise database delete "$db" --insecure --yes || echo "Failed to delete $db"
        fi
      done &&
      echo "Cleanup complete. Remaining databases:" &&
      redis-enterprise database list --insecure --output table
      '

  # Full integration test suite
  integration:
    build:
      context: .
      dockerfile: Dockerfile
    image: redis-enterprise-cli:latest
    container_name: redis-enterprise-integration
    networks:
      - redis-net
    depends_on:
      enterprise-db-create:
        condition: service_completed_successfully
    environment:
      REDIS_ENTERPRISE_URL: "https://enterprise:9443"
      REDIS_ENTERPRISE_USER: "admin@redis.local"
      REDIS_ENTERPRISE_PASSWORD: "Redis123!"
      RUST_LOG: ${RUST_LOG:-info}
    profiles: ["integration"]
    command: |
      sh -c '
      echo "=== Running Full Integration Test Suite ===\n" &&
      
      echo "Test 1: Database lifecycle" &&
      redis-enterprise database create --name int-test-db --memory 50MB --port 12005 --insecure &&
      redis-enterprise database wait int-test-db --status active --timeout 60 --insecure &&
      redis-enterprise database update int-test-db --memory 100MB --insecure &&
      redis-enterprise database stats int-test-db --insecure --output json > /dev/null &&
      redis-enterprise database delete int-test-db --yes --insecure &&
      echo "✓ Database lifecycle test passed" &&
      
      echo "\nTest 2: User and Role management" &&
      redis-enterprise user create --email int-test@redis.com --password IntTest123! --insecure &&
      redis-enterprise user list --insecure --query "[?email==\`int-test@redis.com\`]" > /dev/null &&
      redis-enterprise role list --insecure --include-builtin > /dev/null &&
      echo "✓ User and Role management test passed" &&
      
      echo "\nTest 3: Configuration profiles" &&
      redis-enterprise config set --profile int-test --url https://test.example.com --username test@redis.com &&
      redis-enterprise config get --profile int-test > /dev/null &&
      redis-enterprise config remove --profile int-test &&
      echo "✓ Configuration profiles test passed" &&
      
      echo "\nTest 4: Workflow commands" &&
      redis-enterprise workflow create-database --name workflow-test --db-type cache --insecure &&
      redis-enterprise database wait workflow-test --status active --timeout 60 --insecure &&
      redis-enterprise database delete workflow-test --yes --insecure &&
      echo "✓ Workflow commands test passed" &&
      
      echo "\n=== Integration Test Suite Complete - All Tests Passed! ===\n"
      '