name: release-please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      redisctl_release_created: ${{ steps.release.outputs['crates/redisctl--release_created'] }}
      redisctl_tag_name: ${{ steps.release.outputs['crates/redisctl--tag_name'] }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  build-binaries:
    needs: release-please
    if: ${{ needs.release-please.outputs.redisctl_release_created == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 (most common)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: redisctl-linux-x86_64
            
          # Linux x86_64 MUSL (for Alpine and static linking)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: redisctl-linux-musl-x86_64
            use_cross: true
            
          # Linux ARM64 (for ARM servers and newer devices)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: redisctl-linux-aarch64
            use_cross: true
            
          # macOS Intel (x86_64)
          - os: macos-13
            target: x86_64-apple-darwin
            artifact_name: redisctl-macos-x86_64
            
          # macOS Apple Silicon (M1/M2/M3)
          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: redisctl-macos-aarch64
            
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: redisctl-windows-x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross == true
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build all binaries (cross)
        if: matrix.use_cross == true
        run: |
          cross build --release --target ${{ matrix.target }} --bin redisctl
          cross build --release --target ${{ matrix.target }} --features cloud-only --bin redis-cloud
          cross build --release --target ${{ matrix.target }} --features enterprise-only --bin redis-enterprise

      - name: Build all binaries (cargo)
        if: matrix.use_cross != true
        run: |
          cargo build --release --target ${{ matrix.target }} --bin redisctl
          cargo build --release --target ${{ matrix.target }} --features cloud-only --bin redis-cloud
          cargo build --release --target ${{ matrix.target }} --features enterprise-only --bin redis-enterprise

      - name: Package (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.artifact_name }}.tar.gz redisctl redis-cloud redis-enterprise
          cd ../../../
          echo "ASSET=${{ matrix.artifact_name }}.tar.gz" >> $GITHUB_ENV

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Compress-Archive -Path target\${{ matrix.target }}\release\redisctl.exe,target\${{ matrix.target }}\release\redis-cloud.exe,target\${{ matrix.target }}\release\redis-enterprise.exe -DestinationPath ${{ matrix.artifact_name }}.zip
          echo "ASSET=${{ matrix.artifact_name }}.zip" >> $env:GITHUB_ENV

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.redisctl_tag_name }}
          files: ${{ env.ASSET }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}